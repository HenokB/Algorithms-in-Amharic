import{_ as t,c as s,o,l as e,a as l}from"./chunks/framework.Dh2eLG0n.js";const B=JSON.parse('{"title":"የአልጎሪዝም ዓይነቶች፡-","description":"","frontmatter":{},"headers":[],"relativePath":"docs/0-Basics-of-Algorithms/types-of-algorithms.md","filePath":"docs/0-Basics-of-Algorithms/types-of-algorithms.md"}'),a={name:"docs/0-Basics-of-Algorithms/types-of-algorithms.md"},r=e("h1",{id:"የአልጎሪዝም-ዓይነቶች፡",tabindex:"-1"},[l("የአልጎሪዝም ዓይነቶች፡- "),e("a",{class:"header-anchor",href:"#የአልጎሪዝም-ዓይነቶች፡","aria-label":'Permalink to "የአልጎሪዝም ዓይነቶች፡-"'},"​")],-1),i=e("p",null,"ብዙ አይነት የአልጎሪዝም ዓይነቶች አሉ፡-",-1),n=e("ol",null,[e("li",null,[e("p",null,"Brute Force Algorithm፡ ለችግሩ ቀላሉ መንገድ ነው። Brute Force አንድን ችግር ስንመለከት ለማግኘት የሚመጣው የመጀመሪያ አካሄድ ነው።")]),e("li",null,[e("p",null,"/ የቅርብ ቀመር/ተደጋጋሚ/ recursive አልጎሪዝም፡- ተደጋጋሚ አልጎሪዝም በድግግሞሽ ላይ የተመሰረተ ነው። በዚህ ጉዳይ ላይ አንድ ችግር ወደ ብዙ ንዑስ ክፍሎች ተከፋፍሎ እና ተመሳሳይ ተግባር እንደገና ይጠራል ።")]),e("li",null,[e("p",null,"Backtracking Algorithm፡ የBacktracking ትራኪንግ አልጎሪዝም በመሠረቱ በሁሉም መፍትሄዎች መካከል በመፈለግ መፍትሄውን ይገነባል። ይህንን ስልተ ቀመር በመጠቀም፣ መመዘኛዎችን በመከተል መፍትሄውን መገንባታችንን እንቀጥላለን። መፍትሄው ካልተሳካ ወደ ውድቀት ነጥቡ እንመለስ እና ቀጣዩን መፍትሄ እንገነባለን እና መፍትሔ ሊገኝለት የሚችል ሁሉ እስኪፈለግ ድረስ እንከታተላለን ሂደቱን እንቀጥላለን።")]),e("li",null,[e("p",null,"የፍለጋ አልጎሪዝም፡- የፍለጋ አልጎሪዝም ከአንድ የተወሰነ የዳታ መዋቅር ውስጥ ያሉትን elements ወይም groups of elements ለመፈለግ የሚያገለግሉ ናቸው። በአቀራረባቸው ወይም በመረጃ አወቃቀሩ ላይ ተመስርተው የተለያዩ አይነት ሊሆኑ ይችላሉ።")])],-1),c=[r,i,n];function d(h,m,p,u,_,f){return o(),s("div",null,c)}const k=t(a,[["render",d]]);export{B as __pageData,k as default};
