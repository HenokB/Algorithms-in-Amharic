import{_ as t,c as i,o as s,a3 as n}from"./chunks/framework.Dh2eLG0n.js";const f=JSON.parse('{"title":"የአልጎሪዝም ባህሪያት ምንድን ናቸው?","description":"","frontmatter":{},"headers":[],"relativePath":"docs/0-Basics-of-Algorithms/index.md","filePath":"docs/0-Basics-of-Algorithms/index.md"}'),o={name:"docs/0-Basics-of-Algorithms/index.md"},r=n('<h1>አልጎሪዝም ምንድን ነው?</h1><p><p>አልጎሪዝም(ስልተ ቀመሮች) አንድ ኮምፒዩተር ስሌቶችን ወይም ሌሎች ችግር ፈቺ አሰራሮችን እንዲያከናውን ሊከተል የሚገባው የትእዛዛት ስብስብ ነው ። አልጎሪዝም በመደበኛ ፍቺው መሠረት አንድን ተግባር ለማከናወን በተወሰነ ቅደም ተከተል የሚከናወን የመጨረሻ ስብስብ(finite set) ነው ። ይህ ፕሮግራም ወይም ኮድ ብቻ አይደለም ፤ በflowchart ወይም በpsuedocode መደበኛ ያልሆነ መግለጫ ተደርጎ የሚወከል ይሆናል።</p></p><p><img src="https://github.com/HenokB/Algorithms-in-Amharic/assets/46082799/58dda912-4bf7-466f-b77c-a9cfa017821b" alt="Screenshot"></p><ul><li><p>ችግር 1/Problem፡ አንድ ችግር እንደ የገሃዱ ዓለም ችግር ወይም የገሃዱ ዓለም ምሳሌ ችግር ተብሎ ሊገለጽ ይችላል ለዚህም ፕሮግራም ወይም መመሪያዎችን ማዘጋጀት ያስፈልግዎታል። አልጎሪዝም የመመሪያዎች ስብስብ ነው።</p></li><li><p><strong>አልጎሪዝም፡</strong>- አልጎሪዝም ለችግር የሚዘጋጅ ደረጃ በደረጃ ሂደት ይገለጻል። </p></li><li><p><strong>ገቢ/Input</strong>፡ አልጎሪዝምን ካዘጋጀ በኋላ፣ ስልተ ቀመሩ አስፈላጊ እና ተፈላጊ ግብዓቶች ተሰጥቷል።</p></li><li><p><strong>የማቀነባበሪያ አሃድ/Processing unit</strong>፡ ግብአቱ ወደ ማቀነባበሪያው ክፍል ይተላለፋል፣ ይህም የሚፈለገውን ውጤት ያመጣል።</p></li><li><p><strong>ውጤት/Output፡</strong> የፕሮግራሙ ውጤት ወይም ውጤት እንደ ውፅዓት ተጠቅሷል።</p></li></ul><h1>አልጎሪዝም እንዴት ነው የሚሰራው?</h1><p> አልጎሪዝም የተወሰኑ ችግሮችን ለመፍታት እና በኮምፒዩተር ሳይንስ እና በሂሳብ መስክ ውስጥ ተግባራትን በብቃት ለማከናወን የተነደፉ ደረጃ በደረጃ ሂደቶች ናቸው። እነዚህ ኃይለኛ የመመሪያዎች ስብስቦች የዘመናዊ ቴክኖሎጂ የጀርባ አጥንት ናቸው እና ሁሉንም ነገር ከድር ፍለጋ እስከ አርቲፊሻል ኢንተለጀንስ ያስተዳድራሉ። አልጎሪዝም እንዴት እንደሚሰራ እነሆ፡- <p><strong>ግብአት/Input</strong>፡ አልጎሪዝም ግብአትን ይወስዳል፣ይህም በተለያዩ ቅርጸቶች ለምሳሌ ቁጥሮች፣ጽሁፍ ወይም ምስሎች።</p><p><strong>ማቀነባበር/Processing</strong>፡ አልጎሪዝም የግብአት ውሂቡን በተከታታይ ሎጂካዊ እና ሒሳባዊ ኦፕሬሽኖች በማስኬድ እንደ አስፈላጊነቱ በመቀየር ማቀነባበር።</p><p><strong>ውጤት/Output</strong>፡ ሂደቱ ከተጠናቀቀ በኋላ አልጎሪዝም ውጤቱን፣ ውሳኔን ወይም ሌላ ትርጉም ያለው መረጃን ያመጣል።</p><p><strong>ቅልጥፍና/Efficiency</strong>፡ የአልጎሪዝም ቁልፍ ገጽታ ስራን በፍጥነት እና በትንሽ ግብአት ለማከናወን በማቀድ ብቃታቸው ነው።</p><p><strong>ማመቻቸት/Optimization</strong>፡ የአልጎሪዝም ዲዛይነሮች ስልተ ቀመሮቻቸውን የሚያሻሽሉባቸውን መንገዶች በየጊዜው ይፈልጋሉ፣ ይህም ፈጣን እና አስተማማኝ ያደርጋቸዋል።</p><p><strong>አተገባበር/Implementation</strong>፡ አልጎሪዝም በተለያዩ የፕሮግራሚንግ ቋንቋዎች በመተግበር ኮምፒውተሮች እንዲፈጽሟቸው እና የተፈለገውን ውጤት እንዲያመጡ ያስችላቸዋል።</p></p><h1>አልጎሪዝም እንዴት እንደሚፃፍ?</h1><p> አልጎሪዝም/ስልተ ቀመሮችን ለመፃፍ በደንብ የተገለጹ መስፈርቶች የሉም። ነገር ግን በሃብት/resource ላይ የተመሰረተ ችግር ነው። አልጎሪዝም ከተወሰነ የፕሮግራም አወጣጥ ቋንቋ ጋር በፍጹም አይጻፉም/never writter for a specific programming lanauge። ሁላችሁም እንደምታውቁት የመሠረታዊ ኮድ ግንባታዎች እንደ **do, for, while** ሁሉም የፕሮግራም አወጣጥ ቋንቋዎች እንደ **flow control such as if-else** እና የመሳሰሉትን የፍሰት ቁጥጥርን ይጋራሉ። እነዚህን የተለመዱ ግንባታዎች በመጠቀም አልጎሪዝም ሊፃፍ ይችላል። አልጎሪዝም በተለምዶ ደረጃ በደረጃ/step-by-step ነው የሚፃፈው፣ ግን ይሄ ሁልጊዜ አይደለም። አልጎሪዝም መጻፍ የችግሩን ጎራ በደንብ ከተገለጸ በኋላ የሚከሰት ሂደት ነው። ማለትም፣ የመፍትሄ ሃሳቦችን እያዘጋጁለት ያለውን የችግር ጎራ ማወቅ አለቦት። </p><h3 id="❓-ጥያቄ፡-ሁለት-ቁጥሮችን-የሚያባዛ-እና-ውጤቱን-የሚያሳይ-ስልተ-ቀመር-ይፍጠሩ።" tabindex="-1">❓ ጥያቄ፡- ሁለት ቁጥሮችን የሚያባዛ እና ውጤቱን የሚያሳይ ስልተ ቀመር ይፍጠሩ። <a class="header-anchor" href="#❓-ጥያቄ፡-ሁለት-ቁጥሮችን-የሚያባዛ-እና-ውጤቱን-የሚያሳይ-ስልተ-ቀመር-ይፍጠሩ።" aria-label="Permalink to &quot;❓ ጥያቄ፡- ሁለት ቁጥሮችን የሚያባዛ እና ውጤቱን የሚያሳይ ስልተ ቀመር ይፍጠሩ።&quot;">​</a></h3><ul><li><p>ደረጃ 1 - ጀምር/start</p></li><li><p>ደረጃ 2 - ሶስት ኢንቲጀር x፣ y &amp; z ያውጃል።</p></li><li><p>ደረጃ 3 - የ x &amp; y ዋጋዎችን ይግለጹ።</p></li><li><p>ደረጃ 4 - የ x እና y እሴቶችን ማባዛት።</p></li><li><p>ደረጃ 5 - ከደረጃ 4 እስከ z ያለውን ውጤት ያከማቹ።</p></li><li><p>ደረጃ 6 - በ z ውስጥ የተቀመጠውን ውጤት ውጣ ።</p></li><li><p>ደረጃ 7 - አቁም/Stop</p></li></ul><h1 id="የአልጎሪዝም-ባህሪያት-ምንድን-ናቸው" tabindex="-1">የአልጎሪዝም ባህሪያት ምንድን ናቸው? <a class="header-anchor" href="#የአልጎሪዝም-ባህሪያት-ምንድን-ናቸው" aria-label="Permalink to &quot;የአልጎሪዝም ባህሪያት ምንድን ናቸው?&quot;">​</a></h1><ul><li><p><strong>ግልጽ እና የማያሻማ/Clear and Unambiguous</strong>፡ አልጎሪዝም የማያሻማ መሆን አለበት። እያንዳንዱ እርምጃው በሁሉም ገፅታዎች ግልጽ መሆን አለበት እና ወደ አንድ ትርጉም ብቻ መምራት አለበት።</p></li><li><p><strong>በሚገባ የተገለጹ ግብዓቶች/Well-Defined Inputs</strong>፡ አንድ አልጎሪዝም ግብዓቶችን ውሰድ የሚል ከሆነ፣ በሚገባ የተገለጹ ግብዓቶች መሆን አለባቸው። ግብአት ሊወስድም ላወስድም ይችላል።</p></li><li><p><strong>በደንብ የተገለጹ ውጤቶች/Well-Defined Outputs</strong>፡ ስልተ ቀመሩ ምን አይነት ውፅዓት እንደሚገኝ በግልፅ መግለጽ አለበት እና በጥሩ ሁኔታም መገለጽ አለበት። ቢያንስ 1 ውጤት ማምጣት አለበት።</p></li><li><p><strong>ውስንነት/Finite-ness፡</strong> አልጎሪዝም ውስን መሆን አለበት ማለትም ከተወሰነ ጊዜ በኋላ መቋረጥ አለበት።</p></li><li><p><strong>ሊተገበር የሚችል/Feasible</strong>፡ አልጎሪዝም ቀላል፣ አጠቃላይ እና ተግባራዊ መሆን አለበት፣ ይህም ባሉ ሀብቶች እንዲፈፀም። ወደፊት አንዳንድ ቴክኖሎጂዎችን ወይም ማንኛውንም ነገር መያዝ የለበትም።</p></li><li><p><strong>ነጻ ቋንቋ/Language Independent</strong>፡ የተነደፈው አልጎሪዝም ከቋንቋ ነጻ መሆን አለበት፣ ማለትም በማንኛውም ቋንቋ ሊተገበር የሚችል ግልጽ መመሪያዎች ብቻ መሆን አለበት፣ ነገር ግን ውጤቱ እንደተጠበቀው አንድ አይነት ይሆናል።</p></li><li><p><strong>ግብዓት/Input</strong>: አልጎሪዝም ዜሮ ወይም ከዚያ በላይ ግብዓቶች አሉት። መሰረታዊ ኦፕሬተር ያለው እያንዳንዱ ዜሮ ወይም ተጨማሪ ግብዓቶችን መቀበል አለበት።</p></li><li><p><strong>ውጤት/Output፡</strong> አልጎሪዝም ቢያንስ አንድ ውጤት ያስገኛል። መሰረታዊ ኦፕሬተርን የያዘ ማንኛውም መመሪያ ዜሮ ወይም ተጨማሪ ግብዓቶችን መቀበል አለበት።</p></li><li><p><strong>እርግጠኝነት/Definiteness፡</strong> በአልጎሪዝም ውስጥ ያሉት ሁሉም መመሪያዎች የማያሻማ፣ ትክክለኛ እና ለመተርጎም ቀላል መሆን አለባቸው። በአልጎሪዝም ውስጥ ያሉትን ማናቸውንም መመሪያዎች በመጥቀስ ምን መደረግ እንዳለበት በግልፅ መረዳት ይችላል. በመመሪያው ውስጥ ያለው እያንዳንዱ መሰረታዊ ኦፕሬተር ያለምንም ግልጽነት መገለጽ አለበት.</p></li><li><p><strong>ፍጻሜ/Finiteness፡</strong> በሁሉም የፈተና ጉዳዮች ላይ ስልተ ቀመር ከተወሰኑ የእርምጃዎች ብዛት በኋላ መቋረጥ አለበት። መሰረታዊ ኦፕሬተርን የያዘ እያንዳንዱ መመሪያ በተወሰነ ጊዜ ውስጥ መቋረጥ አለበት። ማለቂያ የሌላቸው ዑደቶች ወይም ተደጋጋሚ ተግባራት ያለ መሰረታዊ ሁኔታዎች ውስንነት የላቸውም።</p></li><li><p><strong>ውጤታማነት/Effectiveness፡</strong> አንድ ሰው ወረቀት እና እርሳስን ብቻ በመጠቀም ፈልጎ ማግኘት እንዲችል በጣም መሠረታዊ፣ ቀላል እና ሊቻል የሚችል ኦፕሬሽኖችን በመጠቀም አልጎሪዝም መዘጋጀት አለበት።</p></li></ul><h2 id="ዋናዎቹ-የአልጎሪዝም-ምድቦች-ከዚህ-በታች-ተሰጥተዋል" tabindex="-1">ዋናዎቹ የአልጎሪዝም ምድቦች ከዚህ በታች ተሰጥተዋል- <a class="header-anchor" href="#ዋናዎቹ-የአልጎሪዝም-ምድቦች-ከዚህ-በታች-ተሰጥተዋል" aria-label="Permalink to &quot;ዋናዎቹ የአልጎሪዝም ምድቦች ከዚህ በታች ተሰጥተዋል-&quot;">​</a></h2><ul><li><p><strong>መደርደር</strong>/sorting: አልጎሪዝም የተዘጋጀው እቃዎችን በተወሰነ ቅደም ተከተል ለመደርደር ነው።</p></li><li><p><strong>ፍለጋ</strong>/searching: ስልተ ቀመር በመረጃ መዋቅር ውስጥ ያሉትን ነገሮች ለመፈለግ ተዘጋጅቷል።</p></li><li><p><strong>ሰርዝ</strong>/delete: ነባሩን አካል ከዳታ መዋቅር ለመሰረዝ ስልተ ቀመር ተዘጋጅቷል።</p></li><li><p><strong>አስገባ</strong>/insert: ስልተ ቀመር አንድን ንጥል በዳታ መዋቅር ውስጥ ለማስገባት ተዘጋጅቷል።</p></li><li><p><strong>አዘምን</strong>/update ስልተ ቀመር በመረጃ መዋቅር ውስጥ ያለውን ነባር አካል ለማዘመን ተዘጋጅቷል።</p></li></ul>',14),p=[r];function e(l,a,g,c,d,u){return s(),i("div",null,p)}const m=t(o,[["render",e]]);export{f as __pageData,m as default};
